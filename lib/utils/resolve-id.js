"use strict";

var resolve = require("resolve");
var jspmResolve;
// Works around https://github.com/jspm/jspm-cli/pull/1779 is released
try {
  jspmResolve = require("pkg-resolve");
} catch (ex) {
  // pass
}

var moduleDirectories = ["web_modules", "node_modules"];

function resolveModule(id, opts) {
  return new Promise(function (res, rej) {
    resolve(id, opts, function (err, path) {
      console.log('resolve', id, path);
      if (err) {
        return rej(err);
      }
      res(path);
    });
  });
}

module.exports = function (id, base, options) {
  var paths = options.path;
  console.log('paths', paths);
  var trigger = options.trigger || '&';

  var resolveOpts = {
    basedir: base,
    moduleDirectory: moduleDirectories,
    paths: paths,
    extensions: [".css"],
    packageFilter: function processPackage(pkg) {
      if (pkg.style) {
        pkg.main = pkg.style;
      } else if (!pkg.main || !/\.css$/.test(pkg.main)) {
        pkg.main = "index.css";
      }
      return pkg;
    }
  };
  console.log({ base: base, id: id });
  var triggered = false;
  if (id[0] === trigger) {
    console.log('triggered');
    id = id.substr(1);
    triggered = true;
  }

  // if (id[0] === '$')
  return resolveModule((!triggered ? "./" : '') + id, resolveOpts)
  // return resolveModule("./" + id, resolveOpts)
  .catch(function () {
    console.log('catch2');
    return resolveModule((triggered ? "./" : '') + id, resolveOpts);
  }).catch(function () {
    console.log('catch3');
    return jspmResolve.default(id, {
      basedir: resolveOpts.basedir,
      extensions: resolveOpts.extensions
    });
  }).catch(function () {
    console.log('catch4');
    if (paths.indexOf(base) === -1) {
      paths.unshift(base);
    }

    throw new Error(["Failed to find '" + id + "'", "in [ ", "    " + paths.join(",\n        "), "]"].join("\n    "));
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9yZXNvbHZlLWlkLmpzIl0sIm5hbWVzIjpbInJlc29sdmUiLCJyZXF1aXJlIiwianNwbVJlc29sdmUiLCJleCIsIm1vZHVsZURpcmVjdG9yaWVzIiwicmVzb2x2ZU1vZHVsZSIsImlkIiwib3B0cyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJlcnIiLCJwYXRoIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJiYXNlIiwib3B0aW9ucyIsInBhdGhzIiwidHJpZ2dlciIsInJlc29sdmVPcHRzIiwiYmFzZWRpciIsIm1vZHVsZURpcmVjdG9yeSIsImV4dGVuc2lvbnMiLCJwYWNrYWdlRmlsdGVyIiwicHJvY2Vzc1BhY2thZ2UiLCJwa2ciLCJzdHlsZSIsIm1haW4iLCJ0ZXN0IiwidHJpZ2dlcmVkIiwic3Vic3RyIiwiY2F0Y2giLCJkZWZhdWx0IiwiaW5kZXhPZiIsInVuc2hpZnQiLCJFcnJvciIsImpvaW4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxXQUFKO0FBQ0E7QUFDQSxJQUFJO0FBQ0ZBLGdCQUFjRCxRQUFRLGFBQVIsQ0FBZDtBQUNELENBRkQsQ0FHQSxPQUFPRSxFQUFQLEVBQVc7QUFDVDtBQUNEOztBQUVELElBQUlDLG9CQUFvQixDQUN0QixhQURzQixFQUV0QixjQUZzQixDQUF4Qjs7QUFLQSxTQUFTQyxhQUFULENBQXVCQyxFQUF2QixFQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3BDVixZQUFRTSxFQUFSLEVBQVlDLElBQVosRUFBa0IsVUFBU0ksR0FBVCxFQUFjQyxJQUFkLEVBQW9CO0FBQ3BDQyxjQUFRQyxHQUFSLENBQVksU0FBWixFQUF1QlIsRUFBdkIsRUFBMkJNLElBQTNCO0FBQ0EsVUFBSUQsR0FBSixFQUFTO0FBQ1AsZUFBT0QsSUFBSUMsR0FBSixDQUFQO0FBQ0Q7QUFDREYsVUFBSUcsSUFBSjtBQUNELEtBTkQ7QUFPRCxHQVJNLENBQVA7QUFTRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQixVQUFTVixFQUFULEVBQWFXLElBQWIsRUFBbUJDLE9BQW5CLEVBQTRCO0FBQzNDLE1BQUlDLFFBQVFELFFBQVFOLElBQXBCO0FBQ0FDLFVBQVFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCSyxLQUFyQjtBQUNBLE1BQUlDLFVBQVVGLFFBQVFFLE9BQVIsSUFBbUIsR0FBakM7O0FBRUEsTUFBSUMsY0FBYztBQUNoQkMsYUFBU0wsSUFETztBQUVoQk0scUJBQWlCbkIsaUJBRkQ7QUFHaEJlLFdBQU9BLEtBSFM7QUFJaEJLLGdCQUFZLENBQUUsTUFBRixDQUpJO0FBS2hCQyxtQkFBZSxTQUFTQyxjQUFULENBQXdCQyxHQUF4QixFQUE2QjtBQUMxQyxVQUFJQSxJQUFJQyxLQUFSLEVBQWU7QUFDYkQsWUFBSUUsSUFBSixHQUFXRixJQUFJQyxLQUFmO0FBQ0QsT0FGRCxNQUdLLElBQUksQ0FBQ0QsSUFBSUUsSUFBTCxJQUFhLENBQUMsU0FBU0MsSUFBVCxDQUFjSCxJQUFJRSxJQUFsQixDQUFsQixFQUEyQztBQUM5Q0YsWUFBSUUsSUFBSixHQUFXLFdBQVg7QUFDRDtBQUNELGFBQU9GLEdBQVA7QUFDRDtBQWJlLEdBQWxCO0FBZUFkLFVBQVFDLEdBQVIsQ0FBWSxFQUFDRyxVQUFELEVBQU9YLE1BQVAsRUFBWjtBQUNBLE1BQUl5QixZQUFZLEtBQWhCO0FBQ0EsTUFBSXpCLEdBQUcsQ0FBSCxNQUFVYyxPQUFkLEVBQXVCO0FBQ3JCUCxZQUFRQyxHQUFSLENBQVksV0FBWjtBQUNBUixTQUFLQSxHQUFHMEIsTUFBSCxDQUFVLENBQVYsQ0FBTDtBQUNBRCxnQkFBWSxJQUFaO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFPMUIsY0FBYyxDQUFDLENBQUMwQixTQUFELEdBQWEsSUFBYixHQUFvQixFQUFyQixJQUEyQnpCLEVBQXpDLEVBQTZDZSxXQUE3QztBQUNQO0FBRE8sR0FFTlksS0FGTSxDQUVBLFlBQVc7QUFDaEJwQixZQUFRQyxHQUFSLENBQVksUUFBWjtBQUNBLFdBQU9ULGNBQWMsQ0FBQzBCLFlBQVksSUFBWixHQUFtQixFQUFwQixJQUEwQnpCLEVBQXhDLEVBQTRDZSxXQUE1QyxDQUFQO0FBQ0QsR0FMTSxFQU1OWSxLQU5NLENBTUEsWUFBVztBQUNoQnBCLFlBQVFDLEdBQVIsQ0FBWSxRQUFaO0FBQ0EsV0FBT1osWUFBWWdDLE9BQVosQ0FBb0I1QixFQUFwQixFQUF3QjtBQUM3QmdCLGVBQVNELFlBQVlDLE9BRFE7QUFFN0JFLGtCQUFhSCxZQUFZRztBQUZJLEtBQXhCLENBQVA7QUFJRCxHQVpNLEVBYU5TLEtBYk0sQ0FhQSxZQUFXO0FBQ2hCcEIsWUFBUUMsR0FBUixDQUFZLFFBQVo7QUFDQSxRQUFJSyxNQUFNZ0IsT0FBTixDQUFjbEIsSUFBZCxNQUF3QixDQUFDLENBQTdCLEVBQWdDO0FBQzlCRSxZQUFNaUIsT0FBTixDQUFjbkIsSUFBZDtBQUNEOztBQUVELFVBQU0sSUFBSW9CLEtBQUosQ0FBVSxDQUNkLHFCQUFxQi9CLEVBQXJCLEdBQTBCLEdBRFosRUFFZCxPQUZjLEVBR2QsU0FBU2EsTUFBTW1CLElBQU4sQ0FBVyxhQUFYLENBSEssRUFJZCxHQUpjLEVBS2RBLElBTGMsQ0FLVCxRQUxTLENBQVYsQ0FBTjtBQU1ELEdBekJNLENBQVA7QUEwQkQsQ0F2REQiLCJmaWxlIjoicmVzb2x2ZS1pZC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZXNvbHZlID0gcmVxdWlyZShcInJlc29sdmVcIilcbnZhciBqc3BtUmVzb2x2ZVxuLy8gV29ya3MgYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9qc3BtL2pzcG0tY2xpL3B1bGwvMTc3OSBpcyByZWxlYXNlZFxudHJ5IHtcbiAganNwbVJlc29sdmUgPSByZXF1aXJlKFwicGtnLXJlc29sdmVcIilcbn1cbmNhdGNoIChleCkge1xuICAvLyBwYXNzXG59XG5cbnZhciBtb2R1bGVEaXJlY3RvcmllcyA9IFtcbiAgXCJ3ZWJfbW9kdWxlc1wiLFxuICBcIm5vZGVfbW9kdWxlc1wiLFxuXVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kdWxlKGlkLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlaikge1xuICAgIHJlc29sdmUoaWQsIG9wdHMsIGZ1bmN0aW9uKGVyciwgcGF0aCkge1xuICAgICAgY29uc29sZS5sb2coJ3Jlc29sdmUnLCBpZCwgcGF0aCk7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWooZXJyKVxuICAgICAgfVxuICAgICAgcmVzKHBhdGgpXG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpZCwgYmFzZSwgb3B0aW9ucykge1xuICB2YXIgcGF0aHMgPSBvcHRpb25zLnBhdGhcbiAgY29uc29sZS5sb2coJ3BhdGhzJywgcGF0aHMpO1xuICB2YXIgdHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlciB8fCAnJidcblxuICB2YXIgcmVzb2x2ZU9wdHMgPSB7XG4gICAgYmFzZWRpcjogYmFzZSxcbiAgICBtb2R1bGVEaXJlY3Rvcnk6IG1vZHVsZURpcmVjdG9yaWVzLFxuICAgIHBhdGhzOiBwYXRocyxcbiAgICBleHRlbnNpb25zOiBbIFwiLmNzc1wiIF0sXG4gICAgcGFja2FnZUZpbHRlcjogZnVuY3Rpb24gcHJvY2Vzc1BhY2thZ2UocGtnKSB7XG4gICAgICBpZiAocGtnLnN0eWxlKSB7XG4gICAgICAgIHBrZy5tYWluID0gcGtnLnN0eWxlXG4gICAgICB9XG4gICAgICBlbHNlIGlmICghcGtnLm1haW4gfHwgIS9cXC5jc3MkLy50ZXN0KHBrZy5tYWluKSkge1xuICAgICAgICBwa2cubWFpbiA9IFwiaW5kZXguY3NzXCJcbiAgICAgIH1cbiAgICAgIHJldHVybiBwa2dcbiAgICB9LFxuICB9XG4gIGNvbnNvbGUubG9nKHtiYXNlLCBpZH0pO1xuICB2YXIgdHJpZ2dlcmVkID0gZmFsc2VcbiAgaWYgKGlkWzBdID09PSB0cmlnZ2VyKSB7XG4gICAgY29uc29sZS5sb2coJ3RyaWdnZXJlZCcpO1xuICAgIGlkID0gaWQuc3Vic3RyKDEpXG4gICAgdHJpZ2dlcmVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gaWYgKGlkWzBdID09PSAnJCcpXG4gIHJldHVybiByZXNvbHZlTW9kdWxlKCghdHJpZ2dlcmVkID8gXCIuL1wiIDogJycpICsgaWQsIHJlc29sdmVPcHRzKVxuICAvLyByZXR1cm4gcmVzb2x2ZU1vZHVsZShcIi4vXCIgKyBpZCwgcmVzb2x2ZU9wdHMpXG4gIC5jYXRjaChmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmxvZygnY2F0Y2gyJyk7XG4gICAgcmV0dXJuIHJlc29sdmVNb2R1bGUoKHRyaWdnZXJlZCA/IFwiLi9cIiA6ICcnKSArIGlkLCByZXNvbHZlT3B0cylcbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCdjYXRjaDMnKTtcbiAgICByZXR1cm4ganNwbVJlc29sdmUuZGVmYXVsdChpZCwge1xuICAgICAgYmFzZWRpcjogcmVzb2x2ZU9wdHMuYmFzZWRpcixcbiAgICAgIGV4dGVuc2lvbnMgOiByZXNvbHZlT3B0cy5leHRlbnNpb25zLFxuICAgIH0pXG4gIH0pXG4gIC5jYXRjaChmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmxvZygnY2F0Y2g0Jyk7XG4gICAgaWYgKHBhdGhzLmluZGV4T2YoYmFzZSkgPT09IC0xKSB7XG4gICAgICBwYXRocy51bnNoaWZ0KGJhc2UpXG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAgIFwiRmFpbGVkIHRvIGZpbmQgJ1wiICsgaWQgKyBcIidcIixcbiAgICAgIFwiaW4gWyBcIixcbiAgICAgIFwiICAgIFwiICsgcGF0aHMuam9pbihcIixcXG4gICAgICAgIFwiKSxcbiAgICAgIFwiXVwiLFxuICAgIF0uam9pbihcIlxcbiAgICBcIikpXG4gIH0pXG59XG4iXX0=